package package1123;

public class BinarySearchTree {
    class Node {
        public int key;
        public int value;
        Node left;
        Node right;

        public Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
    // 创建一个根节点，初始情况下是空树，根节点指向 null
    private Node root = null;

    // 查找
    public Node search(int key) {
        Node cur = root;
        while (cur != null) {
            if (key == cur.key) {
                // 找到了
                return cur;
            } else if (key < cur.key) {
                // 去左子树中找
                cur = cur.left;
            } else {
                cur = cur.right;
            }
        }
        // 没找到
        return null;
    }

    // 插入
    // 1. 先找到合适的位置
    // 2. 把新的节点放到合适的位置就可以
    public boolean insert(int key, int value) {
        //
        if (root == null) {
            root = new Node(key, value);
            return true;
        }
        Node cur = root;
        Node parent = null;
        while (cur != null) {
            if (key == cur.key) {
                return false;
            } else if (key < cur.key) {
                parent = cur;
                cur = cur.left;
            } else {
                parent = cur;
                cur = cur.right;
            }
        }
        // 循环结束的时候, cur 一定是 null
        // 新节点就应该插入到 parent 下方
        // 上面的循环，关键点在于确定 parent 是谁
        Node newNode = new Node(key, value);
        if(key < parent.key) {
            // 插入到左子树位置就可以
            parent.left = newNode;
        } else {
            parent.right = newNode;
        }
        return true;
    }

    public boolean remove(int key) {
        Node cur = root;
        Node parent = null;
        while (cur != null) {
            if (key == cur.key) {
                // 找到了
                removeNode(parent, cur);
                return true;
            } else if (key < cur.key) {
                // 向左找
                parent = cur;
                cur = cur.left;
            } else {
                // 向右找
                parent = cur;
                cur = cur.right;
            }
        }
        // 树中没有找到对应的节点
        return false;
    }

    // 删除
    private void removeNode(Node parent, Node cur) {
        if (cur.left == null) {
            // 1. 没有左子树的情况
            if (cur == root) {
                // 1.1 直接让 root 指向 cur.right
                root = cur.right;
            } else if (cur == parent.left) {
                // 1.2 让 parent 的 left 指向 cur.right
                parent.left = cur.right;
            } else {
                // 1.3 让 parent 的 right 指向 cur.right
                parent.right = cur.right;
            }
        } else if (cur.right == null) {
            // 2. 没有右子树的情况
            if (cur == root) {
                // 2.1 直接让 root 指向 cur.left
                root = cur.left;
            } else if (cur == parent.left) {
                // 2.2 让 parent 的 left 指向 cur 的 left
                parent.right = cur.left;
            } else {
                parent.left = cur.left;
            }
        } else {
            // 3. 同时有左右子树的情况
            Node scapeGoat = cur.right;
            Node goatPatrent = cur;
            // a) 要去待删除节点的右子树中去找最左侧的元素，替罪羊节点
            while (scapeGoat.left != null) {
                goatPatrent = scapeGoat;
                scapeGoat = scapeGoat.left;
            }
            // 循环结束的时候， scapeGoat 就是替罪羊
            // b) 把替罪羊的 key value 赋值到待删除节点中
            cur.key = scapeGoat.key;
            cur.value = scapeGoat.value;
            // c) 再删除替罪羊节点（删除替罪羊节点的过程就和上面一样）
            // 替罪羊一定没有左子树,还需要根据替罪羊是
            // 父节点的左还是右还得进一步判定如何删除
            if (scapeGoat == goatPatrent.left) {
                // 替罪羊节点是父亲的左子树
                goatPatrent.left = scapeGoat.right;
            } else {
                // 当前替罪羊节点正好就是 cue.right 的时候
                // 就满足这个分支的情况
                goatPatrent.right = scapeGoat.right;
            }
        }
    }

    public static void main(String[] args) {
        // 建立一个二叉搜索树
        BinarySearchTree tree = new BinarySearchTree();
        int[] arr = {9, 5, 2, 7, 3, 6, 8};
        for (int x : arr) {
            tree.insert(x, 0);
        }
        tree.remove(3);
        preOrder(tree.root);
        System.out.println();
        inOrder(tree.root);
        System.out.println();
    }

    public static void preOrder(Node root) {
        if (root == null) {
            return;
        }
        System.out.print(root.key + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    public static void inOrder(Node root) {
        if (root == null) {
            return;
        }
        inOrder(root.left);
        System.out.print(root.key + " ");
        inOrder(root.right);
    }
}
